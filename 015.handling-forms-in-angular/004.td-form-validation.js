/*
    Link: udemy.com/course/the-complete-guide-to-angular-2/learn/lecture/6656470#notes

    As mentioned previously you can use the form state to find out the current form validity and take action accordingly
    like disabling the submit button.

    You can use some built in HTML as well as Angular directives to add a level of requirements which will be picked
    up by the ngForm and then update its form states based on these requirements.

    <form (ngSubmit)="myForm" #myForm="ngForm">
        <input
            type="text"
            name="username"
            ngModel
            required /> <- Inbuilt HTML required directive makes the form invalid if no value is entered.
        <input
            type="email"
            name="email"
            ngModel
            required
            email /> <- Inbuilt Angular email directive adds email validation to the input element.
    </form>

    To verify that the form is validated we can use the form objected generated by Angular. As mentioned, it has
    multiple properties on it which provide information on whether the form is valid or not.
    So in the component:
    @ViewChild('myForm') signupForm: NgForm;

    handleSubmit() {
        if(this.signupForm.valid) // proceed for submission
    }

    NOTE: Angular also adds classes on the form and elements such as ng-touched ng-valid based on the state of
    the form by default.

 */